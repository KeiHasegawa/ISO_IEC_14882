/*
 * Check const works well.
 */
#include <stdio.h>

void f()
{
  class X {
  public:
    mutable int i;
    int j;
  };
  class Y {
  public:
    X x;
    Y()
    {
      printf("`Y::Y' called\n");
      x.i = 0;
      x.j = 1;
    }
  };
  const Y y;
  printf("y.x.i = %d, y.x.j = %d\n", y.x.i, y.x.j);
  y.x.i++; // well-formed: mutable member can be modified
  printf("y.x.i = %d, y.x.j = %d\n", y.x.i, y.x.j);
  Y* p = const_cast<Y*>(&y); // cast away const-ness of y
  p->x.i = 99; // well-formed: mutable member can be modified
  printf("y.x.i = %d, y.x.j = %d\n", y.x.i, y.x.j);
  p->x.j = 99; // undefined: modifies a const member
  printf("y.x.i = %d, y.x.j = %d\n", y.x.i, y.x.j);
}

int main()
{
  f();
  return 0;
}
