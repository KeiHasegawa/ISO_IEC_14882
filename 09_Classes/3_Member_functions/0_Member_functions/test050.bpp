/*
 * Note: a member function can be declared (but not defined) using a typedef
 * for a function type. The resulting member function has exactly the same
 * type as it would have if the function declarator were provided explicitly,
 * see 8.3.5.
 */
#include <stdio.h>

typedef void fv(void);
typedef void fvc(void) const;

struct S {
  fv memfunc1; // equivalent to: void memfunc1(void);
  void memfunc2();
  fvc memfunc3; // equivalent to: void memfunc3(void) const;
};

fv S::* pmfv1 = &S::memfunc1;
fv S::* pmfv2 = &S::memfunc2;
fvc S::* pmfv3 = &S::memfunc3;

void f()
{
  S s;
  s.memfunc1();
  s.memfunc2();
  s.memfunc3();
  (s.*pmfv1)();
  (s.*pmfv2)();
  (s.*pmfv3)();
}

int main()
{
  f();
  return 0;
}

void S::memfunc1()
{
  printf("`S::memfucn1' called\n");
}

void S::memfunc2()
{
  printf("`S::memfucn2' called\n");
}

void S::memfunc3() const
{
  printf("`S::memfucn3' called\n");
}
