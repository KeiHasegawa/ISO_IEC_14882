/*
 * Two implicit conversion sequences of the same form are indistinguishable conversion
 * sequences unless one of the following rules apply:
 * - Standard conversion sequence S1 is a better conversion sequence than standard
 *   conversion sequence S2 if
 *   - S1 is a proper subsequence of S2 (comparing the conversion sequences in the
 *     canonical form defined by 13.3.3.1.1, excluding any Lvalue Transformation; the
 *     identity conversion sequence is considered to be a subsequence of any
 *     non-identity conversion sequence) or, if not that, 
 *   - the rank of S1 is better than the rank of S2, or S1 and S2 have the same rank
 *     and are distinguishable by the rules in the paragraph below, or, if not that,
 *   - S1 and S2 differ only in their qualification conversion and yield similar types
 *     T1 and T2 (4.4), respectively, and the cv-qualification signature of type T1 is
 *     a proper subset of the cv-qualification signature of type T2, and S1 is not the
 *     deprecated string literal array-to-pointer conversion (4.2).
 *   - S1 and S2 are reference bindings (8.5.3), and the types to which the references
 *     refer are the same type except for top-level cv-qualifiers, and the type to
 *     which the reference initialized by S2 refers is more cv-qualified than the type
 *     to which the reference initialized by S1 refers.
 * - User-defined conversion sequence U1 is a better conversion sequence than another
 *   user-defined conversion sequence U2 if they contain the same user-defined
 *   conversion function or constructor and if the second standard conversion sequence
 *   of U1 is better than the second standard conversion sequence of U2.
 */
#include <stdio.h>

struct A {
  operator short();
} a;
int f(int);
int f(float);
int i = f(a); // Calls f(int), because short -> int is
              // better than short -> float.

int main()
{
  printf("i = %d\n", i);
  return 0;
}

int f(int)
{
  printf("`f(int)' called\n");
  return 2;
}

int f(float)
{
  printf("`f(float)' called\n");
  return 3;
}

A::operator short()
{
  printf("`A::operator short()' called\n");
  return 4;
}
