#include <stdio.h>

class A { public: virtual void f(); };
class B { public: virtual void g(); };
class D : public virtual A, private B {};
void g()
{
  printf("`g' called\n");
  D d;
  B* bp = (B*)&d; // cast needed to break protection
  bp->g();
  A* ap = &d; // public derivation, no cast needed
  ap->f();
  ap = dynamic_cast<A*>(&d); // succeeds
  ap->f();
  ap = dynamic_cast<A*>(bp); // fails
  if ( ap )
    printf("error\n");
  else
    printf("ok\n");
  bp = dynamic_cast<B*>(ap); // fails
  if ( bp )
    printf("error\n");
  else
    printf("ok\n");
}

void g2()
{
  D d;
  B* bp = (B*)&d;
  D& dr = dynamic_cast<D&>(*bp); // fails
}

class E : public D, public B {};
class F : public E, public D {};
void h()
{
  printf("`h' called\n");
  F f;
  A* ap = &f; // succeeds: finds unique A
  ap->f();
  D* dp = dynamic_cast<D*>(ap); // fails: yields 0
                                // f has two D sub-objects
  if ( dp )
    printf("error\n");
  else
    printf("ok\n");
  E* ep1 = dynamic_cast<E*>(ap); // succeeds
  ep1->f();
}

int main()
{
  g();
  h();
  return 0;
}

void A::f()
{
  printf("`A::f' called\n");
}

void B::g()
{
  printf("`B::g' called\n");
}

