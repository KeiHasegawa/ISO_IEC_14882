/*
 * The argument list submitted to overload resolution consists of the argument
 * expressions present in the function call syntax preceded by the implied
 * object argument (E). [Note: when comparing the call against the function
 * call operators, the implied object argument is compared against the
 * implicit object parameter of the function call operator. When comparing the
 * call against a surrogate call function, the implied object argument is
 * compared against the first parameter of the surrogate call function. The
 * conversion function from which the surrogate call function was derived will
 * be used in the conversion sequence for that parameter since it converts the
 * implied object argument to the appropriate function pointer or reference
 * required by that first parameter.
 */
#include <stdio.h>

int f1(int);
int f2(float);
typedef int (*fp1)(int);
typedef int (*fp2)(float);
struct A {
  operator fp1() { return f1; }
  operator fp2() { return f2; }
} a;

int main()
{
  int i = a(1); // Calls f1 via pointer returned from
                // conversion function
  return 0;
}

int f1(int a)
{
  printf("`f1(int)' called with %d\n", a);
  return 0;
}

int f2(float a)
{
  printf("`f2(float)' called with %f\n", a);
  return 0;
}
