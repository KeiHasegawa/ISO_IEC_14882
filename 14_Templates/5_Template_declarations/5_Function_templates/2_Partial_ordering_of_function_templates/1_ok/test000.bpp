/*
 * A template is more specialized than another if, and only if, it is at least
 * as specialized as the other template and that template is not at least as
 * specialized as the first.
 */
#include <stdio.h>

template<class T> struct A { A(){} };

template<class T> void f(T)
{
  printf("f(T) called\n");
}

template<class T> void f(T*)
{
  printf("f(T*) called\n");
}

template<class T> void f(const T*)
{
  printf("f(const T*) called\n");
}

template<class T> void g(T)
{
  printf("g(T) called\n");
}

template<class T> void g(T&)
{
  printf("g(T&) called\n");
}

template<class T> void h(const T&)
{
  printf("h(const T&) called\n");
}

template<class T> void h(A<T>&)
{
  printf("h(A<T>&) called\n");
}

void m() {
  const int *p;
  f(p); // f(const T*) is more specialized than f(T) or f(T*)
  A<int> z;
  h(z); //overload resolution selects h(A<T>&)
  const A<int> z2;
  h(z2); // h(const T&) is called because h(A<T>&) is not callable
}

int main()
{
  m();
  return 0;
}
