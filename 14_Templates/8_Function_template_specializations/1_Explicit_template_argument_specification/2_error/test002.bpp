/*
 * For simple function names, argument dependent lookup (3.4.2) applies even
 * when the function name is not visible within the scope of the call. This is
 * because the call still has the syntactic form of a function call (3.4.1).
 * But when a function template with explicit template arguments is used, the
 * call does not have the correct syntactic form unless there is a function
 * template with that name visible at the point of the call. If no such name
 * is visible, the call is not syntactically well-formed and argument-dependent
 * lookup does not apply. If some such name is visible, argument dependent
 * lookup applies and additional function templates may be found in other
 * namespaces.
 */
namespace A {
  struct B { };
  template<int X> void f(B);
}
namespace C {
  template<class T> void f(T t);
}
void g(A::B b) {
  f<3>(b); //ill-formed: not a function call
  A::f<3>(b); //well-formed
  C::f<3>(b); //ill-formed; argument dependent lookup
              // applies only to unqualified names
  using C::f;
  f<3>(b); //well-formed because C::f is visible; then
           // A::f is found by argument dependent lookup
}
