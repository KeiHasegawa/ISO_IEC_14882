class A { virtual void f(); };
class B { virtual void g(); };
class D : public virtual A, private B {};
void g()
{
  D d;
  B* bp = (B*)&d; // cast needed to break protection
  A* ap = &d; // public derivation, no cast needed
  D& dr = dynamic_cast<D&>(*bp); // fails
  ap = dynamic_cast<A*>(bp); // fails
  bp = dynamic_cast<B*>(ap); // fails
  ap = dynamic_cast<A*>(&d); // succeeds
  bp = dynamic_cast<B*>(&d); // fails
}
class E : public D, public B {};
class F : public E, public D {};
void h()
{
  F f;
  A* ap = &f; // succeeds: finds unique A
  D* dp = dynamic_cast<D*>(ap); // fails: yields 0
                                // f has two D sub-objects
  E* ep = (E*)ap; // ill-formed:
                  // cast from virtual base
  E* ep1 = dynamic_cast<E*>(ap); // succeeds
}
