/*
 * The following steps define the result of name lookup in a class scope, C.
 * First, every declaration for the name in the class and in each of its base
 * class sub-objects is considered. A member name f in one subobject B hides
 * a member name f in a sub-object A if A is a base class sub-object of B.
 * Any declarations that are so hidden are eliminated from consideration. Each
 * of these declarations that was introduced by a using-declaration is
 * considered to be from each sub-object of C that is of the type containing
 * the declaration designated by the using-declaration.96) If the resulting set
 * of declarations are not all from sub-objects of the same type, or the set
 * has a nonstatic member and includes members from distinct sub-objects,
 * there is an ambiguity and the program is ill-formed. Otherwise that set is
 * the result of the lookup.
 */
#include <stdio.h>

struct U { static int i; };

struct V : U { };

struct W : U { using U::i; };

struct X : V, W { void foo(); };

void X::foo()
{
  printf("`X::foo' called\n");
  printf("i = %d\n", i); // finds U::i in two ways: as W::i and U::i in V
                         // no ambiguity because U::i is static
}

int main()
{
  X x;
  x.foo();
  return 0;
}

int U::i = 3;
