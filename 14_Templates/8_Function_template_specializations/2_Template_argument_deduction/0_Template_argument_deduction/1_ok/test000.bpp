/*
 * After this substitution is performed, the function parameter type
 * adjustments described in 8.3.5 are performed. [Example: A parameter type of
 * void ()(const int, int[5]) becomes void(*)(int,int*) ]
 */
#include <stdio.h>

template <class T> void f(T t)
{
  printf("f(T) called\n");
}

template <class X> void g(const X x)
{
  printf("g(const X) called\n");
}

template <class Z> void h(Z, Z*)
{
  printf("h(Z, Z*) called\n");
}

int main()
{
  // #1: function type is f(int), t is nonconst
  f<int>(1);
  // #2: function type is f(int), t is const
  f<const int>(1);
  // #3: function type is g(int), x is const
  g<int>(1);
  // #4: function type is g(int), x is const
  g<const int>(1);
  // #5: function type is h(int, const int*)
  h<const int>(1,0);
  return 0;
}
