/*
 * All access controls in clause 11 affect the ability to access a class member
 * name from a particular scope. The access control for names used in the
 * definition of a class member that appears outside of the member's class
 * definition is done as if the entire member definition appeared in the scope
 * of the member's class. In particular, access controls apply as usual to
 * member names accessed as part of a function return type, even though it is
 * not possible to determine the access privileges of that use without first
 * parsing the rest of the function declarator. Similarly, access control for
 * implicit calls to the constructors, the conversion functions, or the
 * destructor called to create and destroy a static data member is performed
 * as if these calls appeared in the scope of the member's class.
 */
#include <stdio.h>

class A {
  typedef int I; // private member
  I f();
  friend I g(I);
  static I x;
};

A::I A::f()
{
  printf("`A::f' called\n");
  return 0;
}

A::I g(A::I p = A::x);

A::I g(A::I p)
{
  printf("`g' called with %d\n", p);
  A a;
  a.f();
  ++A::x;
  return 0;
}

A::I A::x = 0;

int main()
{
  g(5);
  g();
  return 0;
}
